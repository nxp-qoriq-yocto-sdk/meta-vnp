From c32ea1c10b2853f0b4ba847f9ba458716cfa691c Mon Sep 17 00:00:00 2001
From: Calvin Johnson <calvin.johnson@nxp.com>
Date: Thu, 9 May 2019 21:57:14 +0530
Subject: [PATCH 39/40] boards: ls1043avnprdb: configure gpios

-Define GPIOs to handshake with Calypso
-Define GPIO to indicate U-Boot status on LED

Signed-off-by: Calvin Johnson <calvin.johnson@nxp.com>
---
 board/freescale/ls1043ardb/Kconfig      |   4 +
 board/freescale/ls1043ardb/ls1043ardb.c | 129 ++++++++++++------------
 configs/ls1043avnprdb_qspi_defconfig    |   1 +
 3 files changed, 71 insertions(+), 63 deletions(-)

diff --git a/board/freescale/ls1043ardb/Kconfig b/board/freescale/ls1043ardb/Kconfig
index 08bb6c0d9a..0ede119bfb 100755
--- a/board/freescale/ls1043ardb/Kconfig
+++ b/board/freescale/ls1043ardb/Kconfig
@@ -75,4 +75,8 @@ config SYS_HAS_ARMV8_SECURE_BASE
 	  If enabled, please also define the value for ARMV8_SECURE_BASE,
 	  for LS1043ARDB, it could be some address in OCRAM.
 
+config EXTENDED_PIN_MUX
+	bool "Extend PIN MUX for GPIOs"
+	default y
+
 endif
diff --git a/board/freescale/ls1043ardb/ls1043ardb.c b/board/freescale/ls1043ardb/ls1043ardb.c
index e5ad64bfc4..0d86f3208e 100755
--- a/board/freescale/ls1043ardb/ls1043ardb.c
+++ b/board/freescale/ls1043ardb/ls1043ardb.c
@@ -125,54 +125,6 @@ int checkboard(void)
 	return 0;
 }
 
-int board_init(void)
-{
-	struct ccsr_scfg *scfg = (struct ccsr_scfg *)CONFIG_SYS_FSL_SCFG_ADDR;
-
-#ifdef CONFIG_SYS_FSL_ERRATUM_A010315
-	erratum_a010315();
-#endif
-
-#ifdef CONFIG_FSL_IFC
-	init_final_memctl_regs();
-#endif
-
-#ifdef CONFIG_SECURE_BOOT
-	/* In case of Secure Boot, the IBR configures the SMMU
-	 * to allow only Secure transactions.
-	 * SMMU must be reset in bypass mode.
-	 * Set the ClientPD bit and Clear the USFCFG Bit
-	 */
-	u32 val;
-	val = (in_le32(SMMU_SCR0) | SCR0_CLIENTPD_MASK) & ~(SCR0_USFCFG_MASK);
-	out_le32(SMMU_SCR0, val);
-	val = (in_le32(SMMU_NSCR0) | SCR0_CLIENTPD_MASK) & ~(SCR0_USFCFG_MASK);
-	out_le32(SMMU_NSCR0, val);
-#endif
-
-#ifdef CONFIG_FSL_CAAM
-	sec_init();
-#endif
-
-#ifdef CONFIG_FSL_LS_PPA
-	ppa_init();
-#endif
-
-#ifdef CONFIG_U_QE
-	u_qe_init();
-#endif
-	/* invert AQR105 IRQ pins polarity */
-	out_be32(&scfg->intpcr, AQR105_IRQ_MASK);
-
-#ifdef CONFIG_EXTENDED_PIN_MUX
-	configure_rcw_pinmux_reg();
-	configure_gpio1();
-	configure_gpio2();
-#endif
-
-	return 0;
-}
-
 void configure_rcw_pinmux_reg(void)
 {
 	u32 val = 0;
@@ -202,36 +154,39 @@ void configure_rcw_pinmux_reg(void)
 	out_be32(&scfg->rcwpmuxcr0, val);
 }
 
-#define GPIO1_BASE 0x2300000
-#define GPIO1_GPDIR (GPIO1_BASE + 0x0)
+#define GPIO1_BASE 0x02300000
+#define GPIO1_GPDIR	(GPIO1_BASE + 0x0)
 #define GPIO1_GPDAT	(GPIO1_BASE + 0x8)
-#define GPIO1_19BIT	19
-#define GPIO1_22BIT	22
+#define GPIO1_19BIT	(31 - 19)
+#define GPIO1_21BIT	(31 - 21)
+#define GPIO1_22BIT	(31 - 22)
 
 void configure_gpio1(void)
 {
 	u32 val = 0;
 
-	/* Set GPIO1_19 & GPIO1_22 as output */
+	/* Set GPIO1_19, GPIO1_21 & GPIO1_22 as output */
 	val = in_be32(GPIO1_GPDIR);
-	val |= (1 >> GPIO1_19BIT);
-	val |= (1 >> GPIO1_22BIT);
+	val |= (1 << GPIO1_19BIT);
+	val |= (1 << GPIO1_21BIT);
+	val |= (1 << GPIO1_22BIT);
 	out_be32(GPIO1_GPDIR, val);
 
-	/* Set GPIO1_19 & GPIO1_22 as logical ZERO */
+	/* Set GPIO1_19, GPIO1_21 & GPIO1_22 as logical ZERO */
 	val = in_be32(GPIO1_GPDAT);
-	val &= ~(1 >> GPIO1_19BIT);
-	val &= ~(1 >> GPIO1_22BIT);
+	val &= ~(1 << GPIO1_19BIT);
+	val &= ~(1 << GPIO1_21BIT);
+	val &= ~(1 << GPIO1_22BIT);
 	out_be32(GPIO1_GPDAT, val);
 }
 
-#define GPIO2_BASE	0x2310000
+#define GPIO2_BASE	0x02310000
 #define GPIO2_GPDIR	(GPIO2_BASE + 0x0)
 #define GPIO2_GPDAT	(GPIO2_BASE + 0x8)
-#define GPIO2_10BIT	10
-#define GPIO2_11BIT	11
-#define GPIO2_12BIT	12
-#define GPIO2_15BIT	15
+#define GPIO2_10BIT	(31 - 10)
+#define GPIO2_11BIT	(31 - 11)
+#define GPIO2_12BIT	(31 - 12)
+#define GPIO2_15BIT	(31 - 15)
 
 void configure_gpio2(void)
 {
@@ -254,6 +209,54 @@ void configure_gpio2(void)
 	out_be32(GPIO2_GPDAT, val);
 }
 
+int board_init(void)
+{
+	struct ccsr_scfg *scfg = (struct ccsr_scfg *)CONFIG_SYS_FSL_SCFG_ADDR;
+
+#ifdef CONFIG_SYS_FSL_ERRATUM_A010315
+	erratum_a010315();
+#endif
+
+#ifdef CONFIG_FSL_IFC
+	init_final_memctl_regs();
+#endif
+
+#ifdef CONFIG_SECURE_BOOT
+	/* In case of Secure Boot, the IBR configures the SMMU
+	 * to allow only Secure transactions.
+	 * SMMU must be reset in bypass mode.
+	 * Set the ClientPD bit and Clear the USFCFG Bit
+	 */
+	u32 val;
+	val = (in_le32(SMMU_SCR0) | SCR0_CLIENTPD_MASK) & ~(SCR0_USFCFG_MASK);
+	out_le32(SMMU_SCR0, val);
+	val = (in_le32(SMMU_NSCR0) | SCR0_CLIENTPD_MASK) & ~(SCR0_USFCFG_MASK);
+	out_le32(SMMU_NSCR0, val);
+#endif
+
+#ifdef CONFIG_FSL_CAAM
+	sec_init();
+#endif
+
+#ifdef CONFIG_FSL_LS_PPA
+	ppa_init();
+#endif
+
+#ifdef CONFIG_U_QE
+	u_qe_init();
+#endif
+	/* invert AQR105 IRQ pins polarity */
+	out_be32(&scfg->intpcr, AQR105_IRQ_MASK);
+
+#ifdef CONFIG_EXTENDED_PIN_MUX
+	configure_rcw_pinmux_reg();
+	configure_gpio1();
+	configure_gpio2();
+#endif
+
+	return 0;
+}
+
 int config_board_mux(void)
 {
 	struct ccsr_scfg *scfg = (struct ccsr_scfg *)CONFIG_SYS_FSL_SCFG_ADDR;
diff --git a/configs/ls1043avnprdb_qspi_defconfig b/configs/ls1043avnprdb_qspi_defconfig
index 7ff5896edc..6becdda753 100644
--- a/configs/ls1043avnprdb_qspi_defconfig
+++ b/configs/ls1043avnprdb_qspi_defconfig
@@ -40,3 +40,4 @@ CONFIG_USB_XHCI_DWC3=y
 CONFIG_USB_STORAGE=y
 CONFIG_SYS_FSL_DDR3=y
 CONFIG_SPI_FLASH_USE_4K_SECTORS=n
+CONFIG_EXTENDED_PIN_MUX=y
-- 
2.17.1

