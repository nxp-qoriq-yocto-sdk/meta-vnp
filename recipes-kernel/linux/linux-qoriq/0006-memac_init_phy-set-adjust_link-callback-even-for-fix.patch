From 253639ad718a3371e288e948f9b68859838422cf Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <vladimir.oltean@nxp.com>
Date: Fri, 4 May 2018 19:23:59 +0300
Subject: [PATCH 06/16] memac_init_phy: set adjust_link callback even for
 fixed-link interfaces

* It appears that fman_memac_init (in fman_memac.c) sets the IF_MODE
  bits IF_MODE_RGMII_AUTO bit for RGMII ports (this translates to
  ENA = 1 - Enable automatic speed selection - RGMII PHY in-band status
  information is used to select the speed of operation).
* In the case of RGMII fixed-link, the adjust_link_void callback that was
  previously given to of_phy_connect does nothing (as the name would suggest).
  On the other hand, the adjust_link function calls fman_memac_adjust_link,
  which brings the RGMII port in ENA = 0 mode (link speed not determined
  autonomously by the MAC, but set according to SSP).
* Basically, the issue is that for fixed-link RGMII setups, most (if not
  all?) link partners will not send any in-band link speed information
  to our MAC. This means that the link speed setting will probably not
  be correct (and will definitely not be according to the "fixed-link"
  property that is set in the DTS).
* The adjust_link callback seems to be called by the PHY state machine,
  even for fixed links, exactly once: on "link up". Therefore, this
  patch ensures that on link up, RGMII fixed links are configured to the
  link speed that is set in the DTS, and not left with IF_MODE[ENA] = 1.

Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/mac-api.c | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/mac-api.c b/drivers/net/ethernet/freescale/sdk_dpaa/mac-api.c
index 5770c773cd2a..b117e2d10761 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/mac-api.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/mac-api.c
@@ -504,12 +504,23 @@ static int memac_init_phy(struct net_device *net_dev,
 	struct phy_device       *phy_dev;
 
 	if ((macdev2enetinterface(mac_dev) == e_ENET_MODE_XGMII_10000) ||
-	    (macdev2enetinterface(mac_dev) == e_ENET_MODE_SGMII_2500) ||
-	    of_phy_is_fixed_link(mac_dev->phy_node)) {
+	    (macdev2enetinterface(mac_dev) == e_ENET_MODE_SGMII_2500)) {
+		/* Pass a void link state handler to the PHY state machine
+		 * for XGMII (10G) and SGMII 2.5G, as the hardware does not
+		 * permit dynamic link speed adjustments. */
 		phy_dev = of_phy_connect(net_dev, mac_dev->phy_node,
 					 &adjust_link_void, 0,
 					 mac_dev->phy_if);
 	} else {
+		/* Ports that are marked as "fixed-link" in the DTS, as well
+		 * as regular ports, will have the adjust_link callback
+		 * (after quite a few layers of indirection,
+		 * fman_memac_adjust_link is called).
+		 * Currently fixed-link RGMII ports still need to respond to
+		 * "link up" events in order to configure the link speed to
+		 * the value set in the DTS, as this is not done during
+		 * initialization (memac_init_phy).
+		 */
 		phy_dev = of_phy_connect(net_dev, mac_dev->phy_node,
 					 &adjust_link, 0, mac_dev->phy_if);
 	}
-- 
2.17.1

